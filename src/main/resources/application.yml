spring:
  application:
    name: NOTIFICATION-SERVICE
  #    zipkin:
  #      base-url: http://127.0.0.1:9411/
  # DATABASE CONFIGURATIONS
  datasource:
    url: jdbc:mysql://localhost:3306/notification?createDatabaseIfNotExist=true
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  #    initialization-mode: never

  jpa:
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: create
    #      ddl-auto: none
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          time_zone: UTC

  mail:
    host: smtp.gmail.com
    port: 587
    username: chamathrivindu12000@gmail.com
    password: oighhaziivrlroax
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connection-timeout: 5000
          timeout: 3000
          write timeout: 5000

  redis:
    host: localhost
    port: 6379

  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: COG-Email-Group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    topic:
      html:
        send-html-mail: send_html_mail
        send_sms_notification: send_html_mail_sms_notification
        send_push_notification: send_html_mail_push_notification
      file:
        send-file-mail: send_file_mail
        send_sms_notification: send_file_mail_sms_notification
        send_push_notification: send_file_mail_push_notification
    listener:
      concurrency: 2

  flyway:
    baseline-on-migrate: true


#security:
#  oauth2:
#    resource:
#      token-info-uri: http://localhost:9191/api/v5/authorize
#    client:
#      client-id: Web
#      client-secret: 1234

app:
  mail:
    template:
      item-detail-section: item-detail-section.ftl
      top-banner-section: top-banner-ad-section.ftl
  sms:
    service-name:
      plivo: plivo # if you change the name here, please change it accordingly in the relevant class as well
      twilio: twilio # if you change the name here, please change it accordingly in the relevant class as well
      active: ${app.sms.service-name.plivo} # Defines which Sms Service Client use for sms sending process. Eg:- plivoSmsService, twilioSmsService etc...
  redis:
    client-secret: abcd
  firebase:
    service-account: classpath:/firebase-service-account.json
    project-id: fir-messaging-with-sprin-ae926
    topic: cog-push-notifications-5.0
  plivo:
    source: COG
    auth:
      id:
      token:
  swagger:
    title: COG - Notification Service REST APIs
    description: REST API End Points for COG (V5) Application
    version: 1.0
    terms-of-service:
      url: Terms of service
    contact:
      name: test
      url: www.org.com
      email: test@emaildomain.com
    license: License of API
    license-url: API license URL

server:
  port: 8080
